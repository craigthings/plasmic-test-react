// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5TUFsMr1jutmu8n3UiyCoV
// Component: jznGXWeZ3e
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HorizonalContainer from "../../HorizonalContainer"; // plasmic-import: ImdPFYAZQh/component
import WorkItem from "../../WorkItem"; // plasmic-import: M60KbPHn4A/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 5TUFsMr1jutmu8n3UiyCoV/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: jznGXWeZ3e/css

export type PlasmicHomepage__VariantMembers = {
  design: "design";
};

export type PlasmicHomepage__VariantsArgs = {
  design?: SingleBooleanChoiceArg<"design">;
};

type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "design"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  testimonials?: p.Flex<typeof HorizonalContainer>;
};

export interface DefaultHomepageProps {
  design?: SingleBooleanChoiceArg<"design">;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__design]: hasVariant(variants, "design", "design") }
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            <HorizonalContainer
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames("__wab_instance", sty.testimonials, {
                [sty.testimonials__design]: hasVariant(
                  variants,
                  "design",
                  "design"
                )
              })}
            >
              {(hasVariant(variants, "design", "design") ? true : false) ? (
                <WorkItem
                  className={classNames("__wab_instance", sty.workItem__x0VmH, {
                    [sty.workItem__design__x0VmHd5EyD]: hasVariant(
                      variants,
                      "design",
                      "design"
                    )
                  })}
                />
              ) : null}
              {(hasVariant(variants, "design", "design") ? true : false) ? (
                <WorkItem
                  className={classNames(
                    "__wab_instance",
                    sty.workItem___6Vpih,
                    {
                      [sty.workItem__design___6Vpihd5EyD]: hasVariant(
                        variants,
                        "design",
                        "design"
                      )
                    }
                  )}
                />
              ) : null}
              {(hasVariant(variants, "design", "design") ? true : false) ? (
                <WorkItem
                  className={classNames("__wab_instance", sty.workItem__llGpJ, {
                    [sty.workItem__design__llGpJd5EyD]: hasVariant(
                      variants,
                      "design",
                      "design"
                    )
                  })}
                />
              ) : null}
            </HorizonalContainer>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "testimonials"],
  freeBox: ["freeBox", "testimonials"],
  testimonials: ["testimonials"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  testimonials: typeof HorizonalContainer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    testimonials: makeNodeComponent("testimonials"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
